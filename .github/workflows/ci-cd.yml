name: Java CI/CD with SonarCloud and EC2 Deployment

on:
  push:
    branches: [ staging, main ]
  pull_request:
    branches: [ staging, main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

      - name: Generate coverage report
        run: ./gradlew jacocoTestReport

      - name: SonarCloud Scan
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        continue-on-error: true
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest

  deploy:
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    runs-on: ubuntu-latest

    steps:
      - name: Releasing New Version
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker system prune -af
            
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest
            
            docker stop web_server || true
            docker rm web_server || true
            
            docker run -d \
              --name=web_server \
              -p 8080:8080 \
              --env DB_HOST=${{ secrets.DB_HOST }} \
              --env DB_PORT=${{ secrets.DB_PORT }} \
              --env DB_NAME=${{ secrets.DB_NAME }} \
              --env DB_USERNAME=${{ secrets.DB_USERNAME }} \
              --env DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              --env JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              --env JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
              --env JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }} \
              --env SERVER_PORT=8080 \
              --env LOG_SECURITY_LEVEL=INFO \
              --env LOG_SQL_LEVEL=INFO \
              --env LOG_SQL_PARAMS_LEVEL=INFO \
              --env SHOW_SQL=false \
              --env COURSE_SERVICE_URL=${{ secrets.COURSE_SERVICE_URL }} \
              --env AUTH_SERVICE_URL=${{ secrets.AUTH_SERVICE_URL }} \
              ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest