name: CD - Deploy to Production

on:
  push:
    branches:
      - main
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: DOCKER_USERNAME,DOCKER_REPO,DB_HOST,DB_PORT,DB_NAME,DB_USERNAME,DB_PASSWORD,JWT_SECRET_KEY,JWT_EXPIRATION,COURSE_SERVICE_URL,AUTH_SERVICE_URL
          script: |
            cat > docker-compose.prod.yml << 'EOF'
            version: '3.8'
            services:
              udehnih-review-rating:
                image: ${DOCKER_USERNAME}/${DOCKER_REPO}:latest
                ports:
                  - "8085:5005"
                environment:
                  - DB_HOST=${DB_HOST}
                  - DB_PORT=${DB_PORT}
                  - DB_NAME=${DB_NAME}
                  - DB_USERNAME=${DB_USERNAME}
                  - DB_PASSWORD=${DB_PASSWORD}
                  - JWT_SECRET_KEY=${JWT_SECRET_KEY}
                  - JWT_EXPIRATION=${JWT_EXPIRATION}
                  - SERVER_PORT=5005
                  - COURSE_SERVICE_URL=${COURSE_SERVICE_URL}
                  - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
                networks:
                  - monitoring
              prometheus:
                image: prom/prometheus:latest
                ports:
                  - "9092:9090"
                volumes:
                  - ./prometheus.yml:/etc/prometheus/prometheus.yml
                networks:
                  - monitoring
              grafana:
                image: grafana/grafana:latest
                ports:
                  - "3002:3000"
                environment:
                  - GF_SECURITY_ADMIN_USER=admin
                  - GF_SECURITY_ADMIN_PASSWORD=admin
                volumes:
                  - grafana_data:/var/lib/grafana
                networks:
                  - monitoring
            networks:
              monitoring:
            volumes:
              grafana_data:
            EOF
            cat > prometheus.yml << 'EOF'
            global:
              scrape_interval: 15s
            scrape_configs:
              - job_name: 'spring-boot-app'
                static_configs:
                  - targets: ['udehnih-review-rating:5005']
                metrics_path: '/actuator/prometheus'
            EOF
            docker system prune -af
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker pull $DOCKER_USERNAME/$DOCKER_REPO:latest
            docker compose -f docker-compose.prod.yml down || true
            docker compose -f docker-compose.prod.yml up -d
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          DOCKER_REPO: ${{ secrets.DOCKER_HUB_REPO_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          COURSE_SERVICE_URL: ${{ secrets.COURSE_SERVICE_URL }}
          AUTH_SERVICE_URL: ${{ secrets.AUTH_SERVICE_URL }}